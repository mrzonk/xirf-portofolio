---
import Layout from "../layouts/Layout.astro";
import projects from "../data/projects";
import type { Project } from "../types/Project";

const projectKeys = Object.keys(projects) as Array<keyof typeof projects>;
---

<Layout title="Galang projects, take a look at my projects" description="Here are some of the projects that i have done or work on.">
	<div class="flex min-h-screen p-12 max-w-6xl mx-auto relative">
		<main class="w-full flex flex-col gap-6 slide-enter-content">
			<h1 class="text-center font-lexend text-3xl font-bold dark:text-#e5e7eb">Projects</h1>
			<p class="text-center">Thing that i have done or work on</p>
			<div class="flex flex-col gap-16">
				{
					projectKeys.map((key) => {
						const _projects = projects[key] as unknown as Project[];
						return (
							<div class="flex flex-col gap-4 relative pt-8">
								<h2 class="absolute text-6xl top-0 left-0 font-mono stroke-blueGray dark:(text-d-base) text-l-base opacity-20 font-bold capitalize -z-1 text-stroke">
									{key}
								</h2>
								<div class=" grid sm:grid-cols-2 md:grid-cols-3 gap-3">
									{_projects.map((p: Project) => {
										const pContent = (
											<>
												<div class="mouses absolute w-10 h-10 blur-3xl dark:(bg-white) bg-black" style="display: none;" />
												<div class="pt-2 pr-5">
													<div
														class={`w-full h-10 w-10 aspect-square grow-0 shrink object-contain rounded-lg block ${p.image}`}
													/>
												</div>
												<div class="w-full">
													<h3 class="font-lexend text-xl font-bold">{p.name}</h3>
													<p class="font-lexend text-sm">{p.description}</p>
												</div>
											</>
										);

										const className =
											"relative duration-500 ease-in-out transition-all flex items-center opacity-75 rounded-md overflow-hidden py-2 px-4 hover:(opacity-100) project-items";

										return p.url ? (
											<a href={p.url} target="_blank" class={className}>{pContent}</a>
										) : (
											<div class:list={[className, "cursor-not-allowed"]}>{pContent}</div>
										);
									})}
								</div>
							</div>
						);
					})
				}
			</div>
		</main>
	</div>
</Layout>

<script>
	const projectItems = document.querySelectorAll(".project-items");
	projectItems.forEach((item) => {
		const mouses = item.querySelector(".mouses") as HTMLElement;

		item.addEventListener("mouseenter", () => {
			mouses.style.display = "block";
		});

		item.addEventListener("mousemove", (event: any) => {
			const rect = item.getBoundingClientRect();
			mouses.style.left = `${event.clientX - rect.left}px`;
			mouses.style.top = `${event.clientY - rect.top}px`;
		});

		item.addEventListener("mouseleave", () => {
			mouses.style.display = "none";
		});
	});
</script>
